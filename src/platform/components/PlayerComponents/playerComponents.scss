@import '../../../App.scss';

@mixin playerComponentStyles {
	@each $size in $sizes {
		.row-section-#{$size} {
			@include flex-dir(column);
			@include alignI-justifyC(center, center);
			transition: $transition-fast;
			&.bottom {
				flex-direction: column-reverse;
			}
			.htsh {
				border: getTilePadding($size) solid transparent;
				&.unused {
					z-index: -1;
					&.bottom {
						@include flex-dir(column-reverse);
						&.front {
							align-items: flex-start;
						}
						&.back {
							align-items: flex-end;
						}
					}
					&.top {
						@include flex-dir(column);
						&.front {
							align-items: flex-end;
						}
						&.back {
							align-items: flex-start;
						}
					}
				}
			}

			.horizontal-hidden {
				height: getHiddenTileHeight($size);
				border-top: 1px solid $color-border;
				border-right: 1px solid $color-border;
				border-bottom: 1px solid $color-border;
				background-image: repeating-linear-gradient(
					90deg,
					$color-border 0,
					$color-border 1px,
					transparent 1px,
					transparent getHiddenTileWidth($size)
				);
			}

			.hth {
				height: getHiddenTileHeight($size);
				width: getHiddenTileWidth($size);
				@include default-tile-border;
			}

			.htss {
				@include flow(row wrap-reverse);
				@include alignC-justifyC(flex-start, center);
				width: floor(85%); // IMPORTANT! used in useWindowSize
				margin: getTilePadding($size);
				&.top {
					flex-flow: row-reverse wrap;
				}
				&.discarded {
					width: floor(65%);
					@media all and (min-aspect-ratio: 4/3) {
						// Landscape
						width: floor(45%);
						@media all and (max-width: floor(calc(12 * getShownTileWidth($size) / 0.7))) {
							width: floor(35%);
						}
						@media all and (max-width: floor(calc(9 * getShownTileWidth($size) / 0.7))) {
							width: floor(25%);
						}
					}
				}
			}

			&.offer {
				@include flex-dir(row);
				border-radius: $default-border-radius;
				margin: 3px;
				width: 3 * getShownTileWidth('large');
			}
			&.offer-hover {
				@include flex-dir(row);
				border-radius: $default-border-radius;
				margin: 3px;
				width: 3 * getShownTileWidth('large');
				transition: 0ms;
			}
			&.offer-hover:hover {
				transform: scale(1.03);
				margin: 1px 3px;
				border: 2px solid transparent;
				cursor: pointer;
			}

			.hts {
				height: getShownTileHeight($size);
				width: getShownTileWidth($size);
				border-radius: $default-tile-border-radius;
				background: $color-tile-front;
				&.margin-right {
					margin-right: getHiddenTileWidth($size);
				}
				&.margin-left {
					margin-left: getHiddenTileWidth($size);
				}
				&.flower {
					@include default-flower;
				}
				&.animal {
					height: getShownTileHeight($size) - (2 * getTileBorder($size));
					width: getShownTileWidth($size) - (2 * getTileBorder($size));
					border: getTileBorder($size) solid rgb(28, 28, 28);
				}
				&.last {
					@include highlight;
				}
			}
		}

		.column-section-#{$size} {
			@include flow(row wrap);
			@include alignI-justifyC(center, center);
			transition: $transition-fast;
			&.right {
				flex-direction: row-reverse;
			}

			.vtsh {
				border: getTilePadding($size) solid transparent;
				// border-radius: $default-border-radius;
				transition: $transition-fast;
				&.unused {
					z-index: -1;
					&.right {
						@include flex-dir(row-reverse);
						&.front {
							align-items: flex-end;
						}
						&.back {
							align-items: flex-start;
						}
					}
					&.left {
						@include flex-dir(row);
						&.front {
							align-items: flex-start;
						}
						&.back {
							align-items: flex-end;
						}
					}
				}
			}

			.vertical-hidden {
				width: getHiddenTileHeight($size);
				border-left: 1px solid $color-border;
				border-right: 1px solid $color-border;
				border-top: 1px solid $color-border;
				background-image: repeating-linear-gradient(
					0deg,
					$color-border 0,
					$color-border 1px,
					transparent 1px,
					transparent getHiddenTileWidth($size)
				);
			}

			.vtss {
				@include flow(column-reverse wrap-reverse);
				@include alignC-justifyC(flex-start, center);
				height: floor(92%); // value used in useWindowSize
				margin: getTilePadding($size);
				&.left {
					transform: rotate(180deg);
				}
				&.discarded {
					height: floor(65%);
					@media all and (max-aspect-ratio: 3/4) {
						// Portrait
						height: floor(45%);
						@media all and (max-height: calc(12 * getShownTileWidth($size) / 0.7)) {
							height: floor(35%);
						}
						@media all and (max-height: calc(9 * getShownTileWidth($size) / 0.7)) {
							height: floor(25%);
						}
					}
				}
			}

			.vts {
				height: getShownTileWidth($size);
				width: getShownTileHeight($size);
				&.margin-top {
					margin-top: getHiddenTileWidth($size);
				}
				&.margin-bottom {
					margin-bottom: getHiddenTileWidth($size);
				}
			}

			.vts-bg {
				align-self: flex-start;
				height: getShownTileHeight($size);
				width: getShownTileWidth($size);
				border-radius: $default-tile-border-radius;
				transform: $transform-rotate;
				background-color: $color-tile-front;
				&.flower {
					@include default-flower;
				}
				&.animal {
					height: getShownTileHeight($size) - (2 * getTileBorder($size));
					width: getShownTileWidth($size) - (2 * getTileBorder($size));
					border: getTileBorder($size) solid rgb(28, 28, 28);
				}
				&.last {
					@include highlight;
				}
			}
		}

		.self-hidden-tiles-#{$size} {
			@include flex-dir(row);
			margin: getTilePadding($size);
			transition: $transition-fast;
			z-index: 20;
			.self-hidden-tile {
				height: getSelfHiddenTileHeight($size);
				width: getSelfHiddenTileWidth($size);
				border-radius: $default-tile-border-radius;
				transition: $transition-fast;
				&.unselected {
					background: $color-tile-front;
				}
				&.last {
					margin-left: getHiddenTileHeight($size);
				}
				@include selected;
			}
			&.transform-right {
				margin-right: -1 * getSelfHiddenTileWidth($size) - getHiddenTileHeight($size);
			}
			.self-hidden-tile-bg {
				height: getSelfHiddenTileHeight($size);
			}
		}
	}
}

@include playerComponentStyles;
