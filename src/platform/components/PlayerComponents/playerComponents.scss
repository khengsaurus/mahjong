@import '../../../App.scss';

@mixin playerComponentStyles {
	@each $size in $sizes {
		.row-section-#{$size} {
			@include flex-dir(column);
			@include alignI-justifyC(center, center);
			transition: 200ms;
			&.bottom {
				flex-direction: column-reverse;
			}
			.htsh {
				@include flex-dir(row);
				justify-content: center;
				min-height: getHiddenTileHeight($size);
				margin: getTilePadding($size);
				&.unused {
					align-self: center;
					flex-flow: column wrap;
					@include alignC-justifyC(center, flex-end);
					max-height: (2 * getHiddenTileHeight($size)) + (4 * $tile-border-px);
					z-index: -1;
					&.front {
						flex-flow: column wrap-reverse;
						&.bottom {
							flex-flow: column-reverse wrap;
						}
					}
					&.back {
						flex-flow: column wrap;
						&.bottom {
							flex-flow: column-reverse wrap-reverse;
						}
					}
				}
			}

			.hth {
				height: getHiddenTileHeight($size);
				width: getHiddenTileWidth($size);
				@include default-tile-border;
			}

			.htss {
				@include flow(row wrap-reverse);
				@include alignC-justifyC(flex-start, center);
				width: floor(75vw);
				margin: getTilePadding($size);
				&.top {
					flex-flow: row-reverse wrap;
				}
				&.bottom {
					@include handleBottomMargin($size);
				}
				&.discarded {
					width: floor(65vw);
					@media all and (min-aspect-ratio: 4/3) {
						// Landscape
						width: floor(45vw);
						@media all and (max-width: floor(12 * getShownTileWidth($size) / 0.7)) {
							width: floor(35vw);
						}
						@media all and (max-width: floor(9 * getShownTileWidth($size) / 0.7)) {
							width: floor(25vw);
						}
					}
				}
			}

			.hts {
				height: getShownTileHeight($size);
				width: getShownTileWidth($size);
				border-radius: $default-tile-border-radius;
				background: $color-tile-front;
				&.margin-right {
					margin-right: getHiddenTileWidth($size);
				}
				&.margin-left {
					margin-left: getHiddenTileWidth($size);
				}
				&.flower {
					@include default-flower;
				}
				&.animal {
					height: getShownTileHeight($size) - (2 * $tile-border-px);
					width: getShownTileWidth($size) - (2 * $tile-border-px);
					@include default-tile-border;
				}
				&.last {
					@include highlight;
				}
				&.enlarge {
					height: $enlarge * getShownTileHeight($size);
					width: $enlarge * getShownTileWidth($size);
				}
			}
		}

		.column-section-#{$size} {
			@include flow(row wrap);
			@include alignI-justifyC(center, center);
			transition: 200ms;
			&.right {
				flex-direction: row-reverse;
			}

			.vtsh {
				@include flex-dir(column);
				justify-content: flex-start;
				min-width: getHiddenTileHeight($size);
				margin: getTilePadding($size);
				&.unused {
					align-self: center;
					align-content: flex-start;
					flex-flow: row-reverse wrap-reverse;
					max-width: (2 * getHiddenTileHeight($size)) + (4 * $tile-border-px);
					z-index: -1;
					&.front {
						flex-flow: row wrap;
						&.right {
							flex-flow: row-reverse wrap-reverse;
						}
					}
					&.back {
						flex-flow: row wrap-reverse;
						&.right {
							flex-flow: row-reverse wrap;
						}
					}
				}
			}

			.vth {
				height: getHiddenTileWidth($size);
				width: getHiddenTileHeight($size);
				@include default-tile-border;
			}

			.vtss {
				@include flow(column-reverse wrap-reverse);
				@include alignC-justifyC(flex-start, center);
				height: floor(75vh);
				margin: getTilePadding($size);
				&.left {
					transform: rotate(180deg);
				}
				&.discarded {
					height: floor(65vh);
					@media all and (max-aspect-ratio: 3/4) {
						// Portrait
						height: floor(45vh);
						@media all and (max-height: 12 * getShownTileWidth($size) / 0.7) {
							height: floor(35vh);
						}
						@media all and (max-height: 9 * getShownTileWidth($size) / 0.7) {
							height: floor(25vh);
						}
					}
				}
			}

			.vts {
				height: getShownTileWidth($size);
				width: getShownTileHeight($size);
				&.margin-top {
					margin-top: getHiddenTileWidth($size);
				}
				&.margin-bottom {
					margin-bottom: getHiddenTileWidth($size);
				}
				&.enlarge {
					height: $enlarge * getShownTileHeight($size);
					width: $enlarge * getShownTileWidth($size);
				}
			}

			.vts-bg {
				align-self: flex-start;
				height: getShownTileHeight($size);
				width: getShownTileWidth($size);
				border-radius: $default-tile-border-radius;
				transform: $transform-rotate;
				background-color: $color-tile-front;
				&.flower {
					@include default-flower;
				}
				&.animal {
					height: getShownTileHeight($size) - (3 * $tile-border-px);
					width: getShownTileWidth($size) - (2.5 * $tile-border-px);
					@include default-tile-border;
				}
				&.last {
					@include highlight;
				}
			}
		}

		.self-hidden-tiles-#{$size} {
			align-self: center;
			@include flex-dir(row);
			margin: getTilePadding($size);
			@include handleBottomMargin($size);
			z-index: 20;
			.self-hidden-tile {
				height: getSelfHiddenTileHeight($size);
				width: getSelfHiddenTileWidth($size);
				border-radius: $default-tile-border-radius;
				transition: 200ms;
				&.unselected {
					background: $color-tile-front;
				}
				&.last {
					margin-left: getHiddenTileHeight($size);
				}
				@include selected;
			}

			.self-hidden-tile-bg {
				height: getSelfHiddenTileHeight($size);
			}
		}
	}
}

@include playerComponentStyles;
